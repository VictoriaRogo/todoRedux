{"version":3,"sources":["Form.js","List.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["Form","props","className","onSubmit","e","preventDefault","addItem","target","value","type","List","todoItems","map","el","i","key","title","checked","done","onChange","toggle","defaultValue","onBlur","updateTitle","onClick","deleteItem","swap","length","connect","state","todos","dispatch","addTodo","todo","payload","toggleTodo","index","updateTodo","deleteTodo","swapTodo","index1","index2","Boolean","window","location","hostname","match","initialState","reducer","action","filter","store","createStore","composeWithDevTools","applyMiddleware","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91d84b83.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Form(props) {\n    const submit = (e) => {\n        e.preventDefault();\n        props.addItem(e.target[0].value);\n        e.target[0].value = '';\n    };\n    return (\n        <div className=\"Form\">\n            <form onSubmit={submit}>\n                <input/>\n                <button type='Submit'>Add</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Form;","import React from 'react';\nimport './App.css';\n\nfunction List(props) {\n  const item = (el, i) => (\n      <div key={el.title + i}>\n        <input\n            type='checkbox'\n            className=\"check\"\n            checked={el.done}\n            onChange={() => props.toggle(i)}\n        />\n\n        <input\n            defaultValue={el.title}\n            className={el.done ? \"done inlineEdit\" : \"inlineEdit\"}\n            onBlur={(e) => props.updateTitle(i, e.target.value)}\n        />\n\n        <button onClick={() => props.deleteItem(i)}>&times;</button>\n        {i !== 0  && <button onClick={() => props.swap(i, i-1)}>&#8593;</button>}\n        {i !== props.todoItems.length - 1 && <button onClick={() => props.swap(i, i+1)}>&#8595;</button>}\n\n      </div>\n  );\n  return (\n      <div className=\"List\">\n        {props.todoItems.map(item)}\n      </div>\n  );\n}\n\nexport default List;","import React from 'react';\nimport './App.css';\nimport Form from \"./Form\";\nimport List from \"./List\";\nimport {connect} from 'react-redux';\n\n\nfunction App(props) {\n    return (\n        <div className=\"App\">\n            <Form addItem={props.addTodo}/>\n            <List\n                todoItems={props.todos}\n                toggle={props.toggleTodo}\n                updateTitle={props.updateTodo}\n                deleteItem={props.deleteTodo}\n                swap={props.swapTodo}\n            />\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    todos: state.todos\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    addTodo: (todo) => dispatch({type: 'TODO_ADD', payload: todo}),\n    toggleTodo: (index) => dispatch({type: 'TODO_TOGGLE', payload: index}),\n    updateTodo: (index, title) => dispatch({type: 'TODO_UPDATE', payload: {index, title}}),\n    deleteTodo: (index) => dispatch({type: 'TODO_DELETE', payload: index}),\n    swapTodo: (index1, index2) => dispatch({type: 'TODO_SWAP', payload: {index1, index2}}),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    todos: [\n        {\n            title: 'First todo',\n            done: false,\n        }, {\n            title: 'Second todo',\n            done: false,\n        }, {\n            title: 'Third todo',\n            done: false,\n        }, {\n            title: 'Forth todo',\n            done: false,\n        }, {\n            title: 'Fifth todo',\n            done: false,\n        }\n    ]\n};\n\nconst reducer = (state = initialState, action) => {\n        switch (action.type) {\n\n            case 'TODO_ADD':\n                return {\n                    ...state,\n                    todos: [...state.todos, {title: action.payload, done: false}]\n                };\n\n            case 'TODO_TOGGLE':\n                return {\n                    ...state,\n                    todos: state.todos.map((el, i) => {\n                        if (i === action.payload) {\n                            el.done = !el.done\n                        }\n                        return el;\n                    })\n                };\n            case 'TODO_UPDATE':\n                return {\n                    ...state,\n                    todos: state.todos.map((el, i) => {\n                        if (i === action.payload.index) {\n                            el.title = action.payload.title\n                        }\n                        return el;\n                    })\n                };\n\n            case 'TODO_DELETE':\n                return {\n                    ...state,\n                    todos: state.todos.filter((el, i) => i !== action.payload)\n                };\n\n            case 'TODO_SWAP':\n                return {\n                    ...state,\n                    todos: state.todos.map((el, i) => {\n                        if (i === action.payload.index1) {\n                            return state.todos[action.payload.index2]\n                        }\n                        if (i === action.payload.index2) {\n                            return state.todos[action.payload.index1]\n                        }\n                        return el;\n                    })\n                };\n\n            default:\n                return state;\n        }\n    }\n;\n\nexport default reducer;\n","import {createStore, applyMiddleware} from \"redux\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from './reducer';\n\nconst store = createStore(\n    reducer, composeWithDevTools(\n        applyMiddleware(),\n    )\n);\n\nconsole.log('--store', store);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}